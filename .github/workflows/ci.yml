name: oneDPL CI

on:
  push:
    branches: [main]
  pull_request:
    branches:
      - release_oneDPL
      - main
      - 'release/**'

env:
  BUILD_CONCURRENCY: 2
  MACOS_BUILD_CONCURRENCY: 3
  TEST_TIMEOUT: 360
  MACOS_ONEAPI_DOWNLOAD_LINK: https://registrationcenter-download.intel.com/akdlm/irc_nas/18358/m_cpp-compiler-classic_p_2022.0.0.62_offline.dmg

jobs:
  clang-format:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get clang-format
        run: sudo apt-get install -yqq clang-format-6.0
      - name: Applying clang-format for changed files
        run: |
          FILES=$(git diff --diff-filter=d --name-only ${{ github.event.pull_request.base.sha }} | grep ^include | grep -v nanorange\.hpp\$ || true)
          echo $FILES | xargs -n1 -t -r clang-format-6.0 --style=file -i
      - name: Creating diff
        run: git diff > clang-format.diff
      - name: Checking if diff is empty
        run: if [ -s clang-format.diff ]; then cat clang-format.diff; exit 1; fi
      - if: failure()
        name: Save artifacts
        uses: actions/upload-artifact@v2
        with:
          name: clang-format-diff
          path: clang-format.diff
          retention-days: 3

  codespell:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - name: Install prerequisites
        run: |
          sudo apt update && sudo apt install -y codespell
      - name: Run scan
        run: |
          ${GITHUB_WORKSPACE}/.github/scripts/codespell.sh $(pwd)

  documentation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - name: Install prerequisites
        run: |
          echo GITHUB_SHA_SHORT=${GITHUB_SHA::8} >> $GITHUB_ENV
          python -m pip install -r documentation/library_guide/requirements.txt
      - name: Build documentation
        run: |
          mkdir html
          sphinx-build -b html documentation/library_guide/ html/
      - name: Archive build directory
        uses: actions/upload-artifact@v1
        with:
            name: onedpl-html-docs-${{ env.GITHUB_SHA_SHORT }}
            path: html
  github-pages: 
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: [documentation]
    steps:
      - name: Checkout gh-pages
        uses: actions/checkout@v2
        with:
          ref: gh-pages
          path: gh-pages
      - name: Set env
        run: echo GITHUB_SHA_SHORT=${GITHUB_SHA::8} >> $GITHUB_ENV
      - name: Download documetation
        uses: actions/download-artifact@v2
        with:
          name: onedpl-html-docs-${{ env.GITHUB_SHA_SHORT }}
      - name: Publish to github pages
        run: |
          cd gh-pages
          rm -rf *
          touch .nojekyll # https://github.blog/2009-12-29-bypassing-jekyll-on-github-pages/
          cp -r ../html/* .
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit --reset-author --amend -m "Update from GitHub Actions"
          git push --force origin gh-pages
          
